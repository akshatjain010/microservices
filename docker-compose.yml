---
version: '3'
services:
  ## MySQL Docker Compose Config
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
        POSTGRES_DB: order-service
        POST_USER: ptechie
        POSTGRES_PASSWORD: password
        PGDATA: /data/postgres
    volumes:
        - ./postgres-order:/data/postgres
    expose:
        - "5431"
    ports:
        - "5431:5431"
    command: -p 5431
    restart: unless-stopped
    
  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
        POSTGRES_DB: inventory-service
        POST_USER: ptechie
        POSTGRES_PASSWORD: password
        PGDATA: /data/postgres
    volumes:
        - ./postgres-inventory:/data/postgres
    ports:
        - "5432:5432"
    restart: unless-stopped
    
  ##Mongo Docker Compose Config
  mongo:
      container_name: mongo
      image: mongo:4.4.14-rc0-focal
      restart: unless-stopped
      ports:
          - "27017:27017"
      expose:
          - "27017"
      volumes:
          - ./mongo-data:/data/db
          
  ## Keycloak Config With MySQL database
  keycloak-mysql:
      container_name: keycloak-mysql
      image: mysql:5.7
      volumes:
          - ./mysql_cloak_data:/var/lib/mysql
      environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: keycloak
          MYSQL_USER: keycloak
          MYSQL_PASSWORD: password
          
  keycloak:
      container_name: keycloak
      image: quay.io/keycloak/keycloak:25.0.4
      command: ["start-dev", "--import-realm"]
      environment:
          DB_VENDOR: MYSQL
          DB_ADDR: mysql
          DB_DATABASE: keycloak
          DB_USER: keycloak
          DB_PASSWORD: password
          KEYCLOAK_ADMIN: admin
          KEYCLOAK_ADMIN_PASSWORD: admin
      ports:
          - "8080:8080"
      volumes:
          - ./realms/:/opt/keycloak/data/import/
      depends_on:
          - keycloak-mysql   
       
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.5.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
        - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      
  ##ZIPKIN
  zipkin:
      image: openzipkin/zipkin
      container_name: zipkin
      ports:
          - "9411:9411"
      
  ##Eureka Server
  service-registry: 
      image: akshatjain010/service-registry:latest
      container_name: service-registry
      pull_policy: always
      ports:
          - "8761:8761"
      environment:
          - SPRING_PROFILES_ACTIVE=docker
      depends_on:
          - zipkin
          
  ##Api-Gateway Service
  api-gateway: 
      container_name: api-gateway
      image: akshatjain010/api-gateway:latest
      pull_policy: always
      ports:
          - "8181:8080"
      expose:
          - "8181"
      environment:
          - SPRING_PROFILES_ACTIVE=docker
          - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      depends_on:
          - zipkin
          - service-registry
          - keycloak
          
  ##Product-Service
  product-service: 
      container_name: product-service
      image: akshatjain010/product-service:latest
      pull_policy: always
      environment:
          - SPRING_PROFILES_ACTIVE=docker
      depends_on:
          - mongo
          - service-registry
          - api-gateway
          
  ##Order-Service
  order-service: 
      container_name: order-service
      image: akshatjain010/order-service:latest
      pull_policy: always
      environment:
          - SPRING_PROFILES_ACTIVE=docker
          - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/order-service
      depends_on:
          - postgres-order
          - broker
          - zipkin
          - service-registry
          - api-gateway
          
  ##Inventory-Service
  inventory-service: 
      container_name: inventory-service
      image: akshatjain010/inventory-service:latest
      pull_policy: always
      environment:
          - SPRING_PROFILES_ACTIVE=docker
          - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
      depends_on:
          - postgres-inventory
          - service-registry
          - api-gateway
       
  ##Notification-Service
  notification-service: 
      container_name: notification-service
      image: akshatjain010/notification-service:latest
      pull_policy: always
      environment:
          - SPRING_PROFILES_ACTIVE=docker
      depends_on:
          - broker
          - zipkin
          - service-registry
          - api-gateway
          
  ##Prometheus
  prometheus: 
      container_name: prometheus
      image: prom/prometheus:v2.37.1
      restart: unless-stopped
      ports: 
          - "9090:9090"
      volumes: 
          - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      depends_on:
          - product-service
          - inventory-service
          - order-service
          - notification-service
       
  grafana: 
      container_name: grafana
      image: grafana/grafana-oss:8.5.2
      restart: unless-stopped
      ports: 
          - "3000:3000"
      links:
          - prometheus:prometheus
      volumes: 
          - ./grafana:/var/lib/grafana
      environment:
          - GF_SECURITY_ADMIN_USER=admin
          - GF_SECURITY_ADMIN_PASSWORD=password
          
#networks:
#  my-network:
#    driver: bridge
      
          
  
     
  

